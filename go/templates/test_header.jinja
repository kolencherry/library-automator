package sendgrid

import (
	"fmt"
  "bytes"
  "io"
	"os"
	"os/exec"
	"runtime"
	"testing"
	"time"
)

var (
	testAPIKey      = "SENDGRID_APIKEY"
	testHost        = ""
	prismPath       = os.Getenv("GOPATH") + "/bin"
	prismArgs       = []string{"run", "-s", "https://raw.githubusercontent.com/sendgrid/sendgrid-oai/master/oai_stoplight.json"}
	prismCmd        *exec.Cmd
  buffer bytes.Buffer
	curl *exec.Cmd
  sh *exec.Cmd
)

func TestMain(m *testing.M) {
	// By default prism runs on localhost:4010
	// Learn how to configure prism here: https://designer.stoplight.io/docs/prism
	testHost = "http://localhost:4010"

	prismPath += "/prism"
	if runtime.GOOS == "windows" {
		prismPath += ".exe"
	}

	// Check if prism is installed, if not, install it
	if _, err := os.Stat(prismPath); os.IsNotExist(err) {
		if runtime.GOOS != "windows" {
			curl = exec.Command("curl", "https://raw.githubusercontent.com/stoplightio/prism/master/install.sh")
      sh = exec.Command("sh")
      read, write := io.Pipe()
      curl.Stdout = write
      sh.Stdin = read
      sh.Stdout = &buffer
      curl.Start()
      sh.Start()
      curl.Wait()
      write.Close()
      sh.Wait()
      _, err := io.Copy(os.Stdout, &buffer)
			if err != nil {
				fmt.Println("Error downloading the prism binary, you can try downloading directly here (https://github.com/stoplightio/prism/releases) and place in your $GOPATH/bin directory: ", err)
			}
		} else {
			fmt.Fprintf(os.Stderr, "Please download the Windows binary (https://github.com/stoplightio/prism/releases) and place it in your $GOPATH/bin directory")
			os.Exit(1)
		}
	}

	prismCmd = exec.Command(prismPath, prismArgs...)

	// If you want to see prism's ouput uncomment below.
	// prismReader, err := prismCmd.StdoutPipe()
	// if err != nil {
	// 	fmt.Println("Error creating StdoutPipe for Cmd", err)
	// }

	// scanner := bufio.NewScanner(prismReader)
	// go func() {
	// 	for scanner.Scan() {
	// 		fmt.Printf("prism | %s\n", scanner.Text())
	// 	}
	// }()

	go func() {
		fmt.Println("Start Prism")
		err := prismCmd.Start()
		if err != nil {
			fmt.Println("Error starting prism", err)
		}
	}()

	// Need to give prism enough time to launch!
	duration := time.Second * 15
	time.Sleep(duration)

	exitCode := m.Run()
	if prismCmd != nil {
		prismCmd.Process.Kill()
		prismCmd = nil
	}

	os.Exit(exitCode)
}

func TestSendGridVersion(t *testing.T) {
	if Version != "3.0.0" {
		t.Error("SendGrid version does not match")
	}
}

func TestGetRequest(t *testing.T) {
	request := GetRequest("", "", "")
	if request.BaseURL != "https://api.sendgrid.com" {
		t.Error("Host default not set")
	}
	if request.Headers["Authorization"] != "Bearer " {
		t.Error("Wrong default Authorization")
	}
	if request.Headers["User-Agent"] != "sendgrid/"+Version+";go" {
		t.Error("Wrong default User Agent")
	}

	request = GetRequest("API_KEY", "/v3/endpoint", "https://test.api.com")
	if request.BaseURL != "https://test.api.com/v3/endpoint" {
		t.Error("Host not set correctly")
	}
	if request.Headers["Authorization"] != "Bearer API_KEY" {
		t.Error("Wrong Authorization")
	}
	if request.Headers["User-Agent"] != "sendgrid/"+Version+";go" {
		t.Error("Wrong User Agent")
	}
	if request.Headers["Accept"] != "application/json" {
		t.Error("Wrong Accept header")
	}
}


